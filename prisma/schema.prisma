generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL_DEV")
  directUrl         = env("DIRECT_URL_DEV")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  comments      Comment[]
  post          Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   @unique()
  createdAt DateTime @default(now()) @db.Timestamp(6)
  content   String
  published Boolean  @default(false)
  authorId  String
  description String
  writer    String
  tag       String[]
  comments  Comment?
  image_header String
  image_content String
  author    User     @relation(fields: [authorId], references: [email])
}

model Comment {
  id       Int      @id @default(autoincrement())
  text     String
  userId   String
  postId   Post   @relation(fields: [id], references: [id])
  username User   @relation(fields: [userId], references: [id])
}